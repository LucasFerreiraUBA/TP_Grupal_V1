contador_de_invocaciones,(listaOG, listaLL),An_Reu_Cod,dixTOT = {},posLL = 0,for funcion in listaOG:,dixTOT[funcion] = [],posSub = 0,sublis = [],for funcion2 in listaOG:,sublis.append(0),sublis[posSub] = 0,for call in listaLL[posLL]:,if funcion2 == call:,sublis[posSub] += 1,posSub += 1,posLL += 1,dixTOT[funcion] = sublis,del posLL, funcion, posSub, sublis, funcion2, call,return dixTOT,
contador_de_llamadas,(listaOG, dixTOT),An_Reu_Cod,dixRec = {},pos = 0,for recive in listaOG:,listaRec = [],for envia in dixTOT:,if dixTOT[envia][pos] > 0:,listaRec.append('X'),else:,listaRec.append('O'),dixRec[recive] = listaRec,pos += 1,del pos, recive, listaRec, envia,return dixRec,
escritor,(analiz, listaOG, separador, tab, longitud, dixTOT, dixRec),An_Reu_Cod,n_funcion = 0,for funcion in listaOG:,analiz.write(separador),linea = '',linea += ('|{0:{1}}) {2:{3}}').format(n_funcion, tab, funcion, longitud),n_funcion += 1,contador = 0,for funcion2 in listaOG:,if dixTOT[funcion][contador] > 0 and dixRec[funcion][contador] == 'X':,linea += ('|{0:{1}} ').format('{0}/{1}'.format(dixTOT[funcion][contador], dixRec[funcion][contador]), len(str(contador))),elif dixTOT[funcion][contador] > 0:,linea += ('| {0:{1}} ').format(dixTOT[funcion][contador], len(str(contador))),elif dixRec[funcion][contador] == 'X':,linea += ('| {0:{1}} ').format(dixRec[funcion][contador], len(str(contador))),else:,linea += ('| {0:{1}} ').format('', len(str(contador))),contador += 1,linea += ('|\n'),analiz.write(linea),analiz.write(separador),del funcion, funcion2, contador, n_funcion,return,
generador_de_lista_de_funciones,(),An_Reu_Cod,fuente_unico =  open('fuente_unico.csv','r'),listaOG = [],renglon = fuente_unico.readline().split(","),while renglon != None:,funcion = renglon[0],if funcion != '':,listaOG.append(funcion),renglon = fuente_unico.readline().split(","),else:,renglon = None,fuente_unico.close(),del renglon, funcion,return listaOG,
generador_de_listas_de_llamadas,(listaOG),An_Reu_Cod,fuente_unico =  open('fuente_unico.csv','r'),listaLL = [],renglon = fuente_unico.readline().split(","),while renglon != None:,funcion = renglon[0],if funcion != '':,sublistaLL = procesar_listaFP(renglon, listaOG),listaLL.append(sublistaLL),renglon = fuente_unico.readline().split(","),else:,del funcion,renglon = None,fuente_unico.close(),del renglon, sublistaLL,return listaLL,
procesar_listaFP,(lfp, listaOG),An_Reu_Cod,sublistaLL = [],for linea in lfp:,llamada = None,paren = None,if linea is not lfp[0]:,try:,paren = linea.find('('),if '= ' in linea:,igual = linea.find('= ') + 2,elif '=' in linea:,igual = linea.find('=') + 1,else:,igual = 0,llamada = linea[igual:paren],except:,None,if llamada in listaOG:,sublistaLL.append(llamada),if paren != None:,del paren, igual, llamada, linea,else:,del llamada, linea, paren,return sublistaLL,
reutilizacion_de_codigo,(),An_Reu_Cod,if os.path.isfile("{}\\analizador.txt".format(os.getcwd())):,print('\analizador.txt existe, leyendo...\n'),print(),analizador = open("{}\\analizador.txt".format(os.getcwd()), 'r'),else:,print('\analizador.txt no existe, creando...\n'),listaOG = generador_de_lista_de_funciones(),listaLL = generador_de_listas_de_llamadas(listaOG),dixTOT = contador_de_invocaciones(listaOG, listaLL),dixRec = contador_de_llamadas(listaOG, dixTOT),txt_maker(listaOG, dixTOT, dixRec),del listaOG, listaLL, dixRec, dixTOT,print('analizador.txt creado, leyendo...\n'),print(),analizador = open("{}\\analizador.txt".format(os.getcwd()), 'r'),print(analizador.read()),analizador.close(),input('Pulse ENTER para finalizar.'),
suma_inv,(dixTOT, contador),An_Reu_Cod,suma_total = 0,for funcion in dixTOT:,suma_total += dixTOT[funcion][contador],return suma_total,
