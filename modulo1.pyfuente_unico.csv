generar_csv,(tupla),modulo1,fuente_unico = '',comentarios = '',tupla = insercion(tupla),for funcion in tupla:,fuente_unico += funcion[0] + ',',comentarios += funcion[0] + ',',fuente_unico += funcion[1] + ',',comentarios +=  funcion[4][0] + ',',fuente_unico += funcion[2].strip('.py') + ',',for linea in funcion[3]:,fuente_unico += linea + ',',comentario_separado = separar_comentario(funcion[4][1:]),try:,comentarios += comentario_separado[0] +',',except TypeError:,comentarios+=',',try:,comentarios += comentario_separado[1] + ',',except TypeError:,comentarios += ',',fuente_unico += '\n',comentarios += '\n',return (fuente_unico,comentarios),
insercion,(lista),modulo1,lista = list(lista),n = len(lista),for i in range(1,n):,elemento = lista[i],max_local = i-1,while max_local >= 0 and elemento < lista[max_local]:,lista[max_local+1] = lista[max_local],max_local -= 1,lista[max_local+1] = elemento,return lista[:n-1],
leer_programas,(),modulo1,programa_num = 0,diccionario_salida = {},with open('programas.txt', encoding='utf-8') as p:,renglon = None,while renglon != '':,renglon = p.readline(),if renglon != '':,diccionario_salida['programa' +str(programa_num)] = renglon.strip('\n'),programa_num += 1,return diccionario_salida,
manejar_contenido,(direcciones),modulo1,for D in direcciones:,lista_final = [],with open(direcciones[D], encoding='utf-8') as p:,programa = p.read().split('\n'),nombre_modulo = direcciones[D].split('\\')[-1],for funcion in ordenar_contenido(programa,nombre_modulo):,lista_final.append(funcion),fuente_unico,comentarios= generar_csv(lista_final),fuente = open(nombre_modulo+'fuente_unico.csv','w'),comentario = open(nombre_modulo+'comentario.csv','w'),fuente.write(fuente_unico),comentario.write(comentarios),fuente.close(),comentario.close(),return lista_final,
ordenar_contenido,(programa,nombre_mod),modulo1,lista_mod = [],comentarios = [],codigo = [],es_comentario = False,for linea in programa:,linea = linea.strip(),continue,if '\"\"\"' in linea:,if es_comentario and linea.count('\"\"\"') == 1:,es_comentario = False,comentarios.append(linea),elif linea.count('\"\"\"') == 1:,es_comentario = True,elif es_comentario:,if '[autor:' in linea.lower():,comentarios.insert(0,linea),else:,comentarios.append(linea),elif linea[0] == '#':,if comentarios != []:,comentarios.append(linea),elif linea.split()[0] == 'def':,nombre = linea.split('def ')[1].split('('),if len(lista_mod) > 0:,lista_mod[-1].append(tuple(codigo)),codigo = [],try:,if '[autor:' not in comentarios[0].lower():,comentarios.insert(0,'[Autor: ausente]'),except IndexError:,comentarios.append('[Autor: ausente]'),lista_mod[-1].append(tuple(comentarios)),comentarios = [],lista_mod.append([nombre[0],'('+nombre[1].strip(':'), nombre_mod]),else:,codigo.append(linea),if len(comentarios) == 0:,comentarios.append('[Autor: ausente]'),elif '[autor:' not in comentarios[0].lower():,comentarios.insert(0,'[Autor: ausente]'),lista_mod[-1].append(tuple(codigo)),lista_mod[-1].append(tuple(comentarios)),return lista_mod,
